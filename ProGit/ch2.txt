***********************  commit example ***************************
$ git add *.c add	//the files with c extenstion
$ git add README 	//add README file
$ git commit -m 'initial project verion' //commiting the added files		
*******************************************************************

*********************** clone example  ********************************
$ git clone git://github.com/schacon.grit.git
***********************************************************************

***********************checking the status of file*********************
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working
#
#       modified:   ProGit/ch2.txt
#
*************************************************************************

************************* Staging Modified Files ************************
The main idea is that if a file is staged and after that modified, the commit 
will contains the version of file before modifying.
*************************************************************************

***********************Ignoring files************************************
$ cat .gitignore  // creating the file that contains the ignore patterns
*.[oa]		      // The regexp pattern, So the files ending with o or a
				  //	will be ignored
*~

# a comment – this is ignored
*.a       # no .a files
!lib.a    # but do track lib.a, even though you're ignoring .a files above
/TODO     # only ignore the root TODO file, not subdir/TODO
build/    # ignore all files in the build/ directory
doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt
*************************************************************************

**************** Viewing Your Staged and Unstaged Changes****************
$ git diff     //shows the difference between staged and unstaged files
--- a/ProGit/README
+++ b/ProGit/README
@@ -1 +1,2 @@
-simple file
\ No newline at end of file
+simple file
+modify to see the difference

$ git diff --staged  //(or -- cached) shows the difference between commited and staged
*************************************************************************

************* Commiting Changes *****************************************
$ git commit   // commit, will ask for comment
$ git commit -m 'commit message'  // commit
$ git commit -v //  commit that shows the difference

*************************************************************************

*************** Skipping the Staging Area********************************
$ git commit -a -m 'commit message'  // commit without needing to add files in staging area
*************************************************************************

************* Removing files *****************************************
$ git rm  -- cached <file name> //remove file from staging area
$ git rm <file name> -f    //remove the file from disk if it is in staging area
**********************************************************************

*******************Moving Files*********************************************
$ git mv file.txt rename.txt    // renaming file, only if it is staging area

****************************************************************************

					Viewing the Commit History
*****************Viewing the Commit History ********************************
$ git log
commit 6db3cda071b1ec6ed7b4122e3fc886aa24
Author: alex-jelimalai <alex.jeli@mail.ru
Date:   Thu May 23 17:35:28 2013 +0300

$ git log -p -2 // -p shows differences, -2 only last 2 commits
$ git log --stat // show the some additional summary for each commit
$ git log  -- pretty=oneline //or: short, full,fuller,format:'<own format>'
****************************************************************************

**********************Limiting Log Output***********************************
$ git log --since=1.days      //getting commits logs for last day
## Other options to filter the log
since, after,until,before,author,commiter

****************************************************************************

************************Using a GUI to Visualize History********************
$gitk
****************************************************************************


----------------------------------------------------------------------------
--------------------------Undoing Things:-----------------------------------
----------------------------------------------------------------------------
**********************Changing Your Last Commit*****************************
$ git commit  --amend //change the previoys commit
****************************************************************************

**********************Unstaging a Staged File*******************************
$ git reset HEAD <file> //unstage the file
****************************************************************************

**********************Unmodifying the Modified File*************************
$ git checkout -- README   //checkout to unmodified version
****************************************************************************
	
----------------------------------------------------------------------------
--------------------------Working with Remotes:-----------------------------
----------------------------------------------------------------------------
***************************Showing remotes**********************************
$ git remote   -v   // Show servers( - v specify the URLs)
****************************************************************************

***************************Adding remote repository**************************
$ git remote add pb git://github.com/paulboone/tacgit.git
****************************************************************************

************************Fetching and pulling from Your Remotes**************
$ git fetch // like an update, but witout merging
****************************************************************************

*******************************Sharing Tags**********************************
$ git push origin v1.1   //push the tag
$ git push origin --tags  //push all the tags

*****************************************************************************






























